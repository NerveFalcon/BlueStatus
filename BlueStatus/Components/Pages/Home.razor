@page "/"
@using System.Text
@using Windows.Devices.Bluetooth
@using Windows.Devices.Bluetooth.Rfcomm
@using InTheHand.Net
@using InTheHand.Net.Bluetooth
@using InTheHand.Net.Sockets
@rendermode InteractiveServer

@inject ILogger<Home> logger


<PageTitle>Home</PageTitle>
<h1>Bluetooth devices</h1>

<div class="d-flex justify-content-between">
	<ul class="nav nav-underline">
		<li class="nav-item">
			<a href="#" class="nav-link @IsActive(Tab.Paired)" @onclick="() => SetTab(Tab.Paired)">
				Paired devices
			</a>
		</li>
		<li class="nav-item">
			<a href="#" class="nav-link @IsActive(Tab.New)" @onclick="() => SetTab(Tab.New)">
				New devices
			</a>
		</li>
	</ul>
	<div class="buttons">
		@if (_state.Tab is Tab.New)
		{
			@if (_searchProgress)
			{
				<button class="btn btn-outline-dark" @onclick="StopSearch">Stop</button>
			}
			else
			{
				<button class="btn btn-outline-dark" @onclick="StartSearch">Refresh</button>
			}
		}
		else
		{
			<div class="btn btn-outline-dark" @onclick="ToggleColumns">Toggle more columns</div>
		}
	</div>
</div>

@if (_state.Tab is Tab.Paired)
{
	<table class="table table-striped">
		<thead>
		<tr>
			<th>Connected</th>
			<th>Device name</th>
			<th>Class of device</th>
			<th>Address</th>
			<th>Services</th>
			<th>Actions</th>
		</tr>
		</thead>
		<tbody class="table-group-divider">
		@foreach (var device in PairedDevices)
		{
			<tr class="device">
				<td>
					@if (device.Connected)
					{
						<div class="bi bi-check-circle-fill text-success"></div>
					}
					else
					{
						<div class="bi bi-x-circle-fill text-danger"></div>
					}
				</td>
				<td>@device.DeviceName</td>
				<td>@device.ClassOfDevice.Device</td>
				<td>@device.DeviceAddress</td>
				<td>
					<ul class="list-group">
						@foreach (var service in device.Services)
						{
							<li class="list-item">
								@service.Value.ServiceId.AsString() - @service.Key (@service.Value.DeviceAccessInformation.CurrentStatus)
							</li>
						}
					</ul>
				</td>
				<td>
					<button class="btn btn-dark" @onclick="async () => await TryConnect(device)">Try connect</button>
				</td>
			</tr>
		}
		</tbody>
	</table>
}
else
{
	<table class="table table-striped">
		<thead>
		<tr>
			<th>Название устройства</th>
			<th>Тип устройства</th>
			<th>Адрес</th>
		</tr>
		</thead>
		<tbody class="table-group-divider">
		@foreach (var device in Devices)
		{
			<tr class="device">
				<td>@device.DeviceName</td>
				<td>@device.ClassOfDevice.Device</td>
				<td>@device.DeviceAddress</td>
			</tr>
		}
		</tbody>
	</table>
}

@code
{
	readonly State _state = new();
	bool _searchProgress;
	List<BluetoothDeviceModel> PairedDevices { get; } = [];
	List<BluetoothDeviceModel> Devices { get; } = [];
	BluetoothClient Client { get; set; }
	CancellationTokenSource Cancellation { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Client = new();
		Cancellation = new();

		foreach (var model in Client.PairedDevices.OrderByDescending(d => d.Connected).Select(BluetoothDeviceModel.FromDevice))
			PairedDevices.Add(await model);
	}

	private void StopSearch()
	{
		logger.LogInformation("stop ble search");
		_searchProgress = false;
		StateHasChanged();

		Cancellation.Cancel(true);
	}

	private async Task StartSearch()
	{
		Devices.Clear();
		logger.LogInformation("Start ble search");
		_searchProgress = true;
		StateHasChanged();
		try
		{
			if (!Cancellation.TryReset())
				Cancellation = new();
			var devicesAsync = Client.DiscoverDevicesAsync(Cancellation.Token);
			await Task.Delay(1);

			await foreach (var device in devicesAsync)
			{
				Devices.Add(await BluetoothDeviceModel.FromDevice(device));
				logger.LogInformation("Find {DeviceName}", device.DeviceName);
				StateHasChanged();
			}
		}
		catch (Exception e) when (e is not TaskCanceledException)
		{
			logger.LogError(e, "Search bluetooth devices exception");
			Cancellation.TryReset();
		}
		finally
		{
			_searchProgress = false;
			logger.LogInformation("Stop ble search");
		}
	}

	private void SetTab(Tab tab)
	{
		StopSearch();
		if (_state.Tab != tab)
			_state.Tab = tab;
	}

	private string IsActive(Tab tab)
	{
		return _state.Tab == tab ? "active" : string.Empty;
	}

	private void ToggleColumns()
	{
		_state.MoreColumns = !_state.MoreColumns;
	}

	private async Task TryConnect(BluetoothDeviceModel device)
	{
		logger.LogInformation("device connected: {Status}", device.Connected);

		await Client.ConnectAsync(device.DeviceAddress, BluetoothService.Handsfree);
		Client.Close();

		await Client.ConnectAsync(device.DeviceAddress, BluetoothService.Handsfree);
		if (Client.Connected)
			logger.LogInformation("Connected");

		var stream = Client.GetStream();
		if (stream.CanRead)
		{
			var buff = new byte[1024];
			var str = new StringBuilder();
			var i = 0;
			while (i++ < 5)
			{
				var bytesRead = await stream.ReadAsync(buff, 0, buff.Length);
				var response = Encoding.ASCII.GetString(buff, 0, bytesRead);
				str.Append(response);

				var commandBytes = Encoding.ASCII.GetBytes(response);
				stream.Write(commandBytes, 0, commandBytes.Length);
			}

			logger.LogInformation("{Msg}", str.ToString());
		}

		Client.Close();
		logger.LogInformation("Close connection");
	}

	#region Inner classes

	class State
	{
		public bool MoreColumns { get; set; }
		public Tab Tab { get; set; } = Tab.Paired;
	}

	enum Tab
	{
		Paired,
		New
	}

	class BluetoothDeviceModel
	{
		private BluetoothDeviceModel(BluetoothDeviceInfo bluetoothDeviceInfo, BluetoothDevice bluetoothDevice)
		{
			DeviceInfo = bluetoothDeviceInfo;
			BluetoothDevice = bluetoothDevice;
			Services = [];
		}

		public BluetoothAddress DeviceAddress => DeviceInfo.DeviceAddress;
		public ClassOfDevice ClassOfDevice => DeviceInfo.ClassOfDevice;
		public string DeviceName => DeviceInfo.DeviceName;
		public bool Connected => DeviceInfo.Connected;

		public Dictionary<string, RfcommDeviceService> Services { get; private set; }
		public BluetoothDevice BluetoothDevice { get; }
		public BluetoothDeviceInfo DeviceInfo { get; }

		public static async Task<BluetoothDeviceModel> FromDevice(BluetoothDeviceInfo deviceInfo)
		{
			var bluDevice = await BluetoothDevice.FromBluetoothAddressAsync(deviceInfo.DeviceAddress);
			var device = new BluetoothDeviceModel(deviceInfo, bluDevice);
			await LoadServices(device);

			return device;
		}

		private static async Task LoadServices(BluetoothDeviceModel model)
		{
			var serviceRes = await model.BluetoothDevice.GetRfcommServicesAsync();
			if (serviceRes.Error != BluetoothError.Success)
				return;

			var i = 0;
			model.Services = serviceRes.Services.ToDictionary(k => BluetoothService.GetName(k.ServiceId.Uuid) ?? $"Undefined{++i}", v => v);
		}
	}

	#endregion

}