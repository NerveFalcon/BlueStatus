@page "/"
@using BlueStatus.Bluetooth
@rendermode InteractiveServer

@inject ILogger<Home> logger
@inject BluetoothManager BlueManager


<PageTitle>Home</PageTitle>
<h1>Bluetooth devices</h1>

<div class="d-flex justify-content-between">
	<ul class="nav nav-underline">
		<li class="nav-item">
			<a href="#" class="nav-link @IsActive(Tab.Paired)" @onclick="() => SetTab(Tab.Paired)">
				Paired devices
			</a>
		</li>
		<li class="nav-item">
			<a href="#" class="nav-link @IsActive(Tab.New)" @onclick="() => SetTab(Tab.New)">
				New devices
			</a>
		</li>
	</ul>
	<div class="buttons">
		@if (_state.Tab is Tab.New)
		{
			@if (_searchProgress)
			{
				<button class="btn btn-outline-dark" @onclick="StopSearch">Stop</button>
			}
			else
			{
				<button class="btn btn-outline-dark" @onclick="StartSearch">Refresh</button>
			}
		}
		else
		{
			<div class="btn btn-outline-dark">???</div>
		}
	</div>
</div>

@if (_state.Tab is Tab.Paired)
{
	<table class="table table-striped">
		<thead>
		<tr>
			<th>Connected</th>
			<th>Device name</th>
			<th>Class of device</th>
			<th>Address</th>
			<th>Services</th>
			<th>Actions</th>
		</tr>
		</thead>
		<tbody class="table-group-divider">
		@foreach (var device in PairedDevices)
		{
			<tr class="device">
				<td>
					@if (device.Connected)
					{
						<div class="bi bi-check-circle-fill text-success"></div>
					}
					else
					{
						<div class="bi bi-x-circle-fill text-danger"></div>
					}
				</td>
				<td>@device.DeviceName</td>
				<td>@device.ClassOfDevice.Device</td>
				<td>@device.DeviceAddress</td>
				<td>
					<ul class="list-group">
						@foreach (var service in device.Services)
						{
							<li class="list-item">
								@service.Value.ServiceId.AsString() - @service.Key (@service.Value.DeviceAccessInformation.CurrentStatus)
							</li>
						}
					</ul>
				</td>
				<td>
					<button class="btn btn-dark" @onclick="async () => await TryConnect(device)">Try
						connect
					</button>
				</td>
			</tr>
		}
		</tbody>
	</table>
}
else
{
	<table class="table table-striped">
		<thead>
		<tr>
			<th>Connected</th>
			<th>Device name</th>
			<th>Class of device</th>
			<th>Address</th>
			<th>Services</th>
			<th>Actions</th>
		</tr>
		</thead>
		<tbody class="table-group-divider">
		@foreach (var device in Devices)
		{
			<tr class="device">
				<td>
					@if (device.Connected)
					{
						<div class="bi bi-check-circle-fill text-success"></div>
					}
					else
					{
						<div class="bi bi-x-circle-fill text-danger"></div>
					}
				</td>
				<td>@device.DeviceName</td>
				<td>@device.ClassOfDevice.Device</td>
				<td>@device.DeviceAddress</td>
				<td>
					<ul class="list-group">
						@foreach (var service in device.Services)
						{
							<li class="list-item">
								@service.Value.ServiceId.AsString() - @service.Key (@service.Value.DeviceAccessInformation.CurrentStatus)
							</li>
						}
					</ul>
				</td>
				<td>
					<button class="btn btn-dark" @onclick="async () => await TryConnect(device)">Try
						connect
					</button>
				</td>
			</tr>
		}
		</tbody>
	</table>
	@if (_searchProgress)
	{
		<div class="d-flex justify-content-center">
			<div class="spinner-border" role="status">
				<span class="visually-hidden">Loading...</span>
			</div>
		</div>
	}
}

@code
{
	readonly State _state = new();
	bool _searchProgress;
	List<BluetoothDeviceModel> PairedDevices { get; } = [];
	List<BluetoothDeviceModel> Devices { get; } = [];
	CancellationTokenSource Cancellation { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Cancellation = new();

		await foreach (var device in BlueManager.GetPairedDevicesAsync())
			PairedDevices.Add(device);
	}

	private void StopSearch()
	{
		logger.LogInformation("stop ble search");
		_searchProgress = false;
		StateHasChanged();

		Cancellation.Cancel(true);
	}

	private async Task StartSearch()
	{
		if (_searchProgress) return;
		Devices.Clear();
		logger.LogInformation("Start ble search");
		_searchProgress = true;
		StateHasChanged();

		try
		{
			if (!Cancellation.TryReset())
				Cancellation = new();

			await foreach (var device in BlueManager.SearchDevicesAsync(Cancellation.Token))
			{
				Devices.Add(device);
				StateHasChanged();
			}
		}
		catch (Exception e) when (e is not TaskCanceledException)
		{
			logger.LogError(e, "Search bluetooth devices exception");
			Cancellation.TryReset();
		}
		finally
		{
			_searchProgress = false;
			logger.LogInformation("Stop ble search");
		}
	}

	private void SetTab(Tab tab)
	{
		StopSearch();
		if (_state.Tab != tab)
			_state.Tab = tab;
	}

	private string IsActive(Tab tab)
	{
		return _state.Tab == tab ? "active" : string.Empty;
	}

	#region Inner classes

	class State
	{
		public Tab Tab { get; set; } = Tab.Paired;
	}

	enum Tab
	{
		Paired,
		New
	}

	#endregion

	private async Task TryConnect(BluetoothDeviceModel device)
	{
		if(_searchProgress)
			StopSearch();
		// var cancel = new CancellationTokenSource();
		await BlueManager.TryConnect(device, CancellationToken.None);
	}
}